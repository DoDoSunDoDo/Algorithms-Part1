package com.Princeton.Week1.UnionFind.UF05;

import java.util.HashMap;
import java.util.Map;

public class LC128 {
    public static void main(String[] args) {
        LC128 x = new LC128();
        int[] input = {100,4,200,1,3,2,5,6,7,9};
        System.out.println(x.longest(input));

    }

    public int longest(int[] nums){
        UF uf = new UF(nums.length);
        Map<Integer, Integer> map = new HashMap<>();
        for(int i =0; i<nums.length;i++){
            //let the num[i] is the key, i is the value
            if(map.containsKey(nums[i])) continue;
            // put all key and value into map
            map.put(nums[i],i);
            //if key+-1, connet their value number
            if(map.containsKey(nums[i]+1)) uf.union(i,map.get(nums[i]+1));
            if(map.containsKey(nums[i]-1)) uf.union(i,map.get(nums[i]-1));
        }
        return uf.findMax();
    }
}

class UF{
    int[] root;
    int[] size;
    public UF(int number){
        this.root=new int [number];
        this.size = new int[number];
        for(int i =0; i<number; i++){
            root[i]=i;
            size[i]=1;
        }
    }

    public int find(int x){
        if(root[x]!=x) return find(root[x]);
        return root[x];
    }
    public void union(int x , int y){
        int X = find(x);
        int Y = find(y);
        if(X!=Y){
            if(size[X]>size[Y]){
                root[Y]=X;
                size[X]+=size[Y];
            }else{
                root[X]=Y;
                size[Y]+=size[X];
            }
        }
    }
    public int findMax(){
        int max =0;
        for(int s: size){
            max = Math.max(max,s);
        }
        return max;
    }

}
