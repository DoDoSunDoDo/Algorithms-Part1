//recursion

class Solution {
  public List<Integer> preorderTraversal(TreeNode root) {
    List <Integer> res = new ArrayList<Integer>();
    preorder(root,res);
    return res;
  }
  
  public void preorder(TreeNode root, List<Integer> res){
    if (root == null) return;//需要一个停止的条件
    res.add(root.val);//注意这里是.val不是root
    preorder(root.left, res);
    preorder(root.right, res);
  }
  
}


//iterative
//here has one more stack

class Solution {
  public List<Integer> preorderTraversal(TreeNode root) {
    List<Integer> res = new ArrayList<Integer>();
    Stack<TreeNode> stack = new Stack<>();
    
    if (root == null) return res;
    //第一步是将根节点压入栈中
    stack.push(root);
    
    //当栈不为空时，出栈的元素插入list尾部
    while (!stack.isEmpty()) {
      TreeNode node = stack.pop();
      res.add(node.val);//注意这里是.val
      //先加右边再加左边
      if (node.right !=null ) stack.push(node.right);
      if (node.left !=null) stack.push(node.left);
    }
    return res;
  }
}

