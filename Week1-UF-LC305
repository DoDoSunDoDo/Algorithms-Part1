import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

//Given m = 3, n = 3, positions = [[0,0], [0,1], [1,2], [2,1]]
public class LC305 {
    public static void main(String[] args) {
        Solution s = new Solution();
        int[][] positions={{0,0},{0,1},{1,2},{2,1}};
        List<Integer> res =s.islandNumber(3,3,positions);
        for( Integer r :res ){
            System.out.println(r);
        }
    }
}
class Solution{
    // return a array list for result
    public List<Integer> islandNumber(int m, int n, int[][] positions){
        List<Integer> res =new ArrayList<> ();
        // consider the 2d array as 1d array
        UF uf = new UF(m*n);
        //treat all 0 as boolean false
        boolean[][] island = new boolean[m][n];
        int[][]directions={{-1,0},{1,0},{0,1},{0,-1}};
        int count =0;
        //iterate all assigned position
        for (int[] position: positions){
            //if visited before
            if(island[position[0]][position[1]]){
                res.add(count);
                continue;
            }
            // if hasen't visted, turn water into island, and count+1
            island[position[0]][position[1]] = true;
            count++;
            //if add one island, check its four directions
            for(int[] dir: directions){
                int x = position[0]+dir[0];
                int y = position[1]+dir[1];
                //if neighour not exist and neighbour is false, jump to the next loop
                if(x<0 ||x>=m ||y<0 ||y>=n ||island[x][y]==false) continue;
                //transfer 2d to 1d: nx+y serialization
                int positionRoot = uf.find(position[0]*n + position[1]);
                int neighbourRoot = uf.find(x*n+y);
                //compare their root, if not same, combine and count-1
                if(positionRoot!=neighbourRoot){
                    uf.union(positionRoot, neighbourRoot);
                    count --;
                }
            }
            res.add(count);
        }
        return res;
    }
}

class UF{
    int[] root;
    // int[] size;
    public UF(int n){
        root= new int[n];
        for(int i =0; i<n; i++) {
            root[i] = i;
            //size[i]=1;
        }
    }
    public int find(int x){
        if(root[x]!=x) return find(root[x]);
        // path compression optimization: return root[x]=find(root[x])
        return root[x];
    }
    public void union(int x, int y){
        int rootX = find(x);
        int rootY = find(y);
        if(rootX != rootY){
            root[rootX]=rootY;
        }
        // if(rootX != rootY){
        //  if(size[rootX]>size[rootY]){
        //      root[rootY]=rootX;
        //      size[rootX]+=size[rootY];
        //      }
        //   ....
        // }

    }
}
